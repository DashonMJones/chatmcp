name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            build_target: linux
            apk_build: true
          - os: macos-latest
            build_target: macos
            apk_build: false
          - os: windows-latest
            build_target: windows
            apk_build: false
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Setup Java
        if: matrix.apk_build
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Android SDK
        if: matrix.apk_build
        uses: android-actions/setup-android@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.32.1'

      - name: Create empty .env file
        run: touch .env

      - name: Install Linux Dependencies
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev
      
      - name: Install dependencies
        run: flutter pub get

      - name: Setup Android Signing
        if: matrix.apk_build && github.event_name != 'pull_request'
        env:
          SIGNING_KEYSTORE: ${{ secrets.SIGNING_KEYSTORE }}
          SIGNING_KEY_ALIAS: ${{ secrets.SIGNING_KEY_ALIAS }}
          SIGNING_STORE_PASSWORD: ${{ secrets.SIGNING_STORE_PASSWORD }}
          SIGNING_KEY_PASSWORD: ${{ secrets.SIGNING_KEY_PASSWORD }}
        run: |
          mkdir -p android/app/keystore
          
          if [ -n "$SIGNING_KEYSTORE" ]; then
            echo "$SIGNING_KEYSTORE" | base64 -d > android/app/keystore/release.jks
            echo "SIGNING_STORE_PATH=keystore/release.jks" >> $GITHUB_ENV
            echo "SIGNING_KEY_ALIAS=$SIGNING_KEY_ALIAS" >> $GITHUB_ENV
            echo "SIGNING_STORE_PASSWORD=$SIGNING_STORE_PASSWORD" >> $GITHUB_ENV
            echo "SIGNING_KEY_PASSWORD=$SIGNING_KEY_PASSWORD" >> $GITHUB_ENV
            echo "✅ Android 签名配置已设置"
          else
            echo "⚠️  未找到签名配置，将使用 debug 签名"
          fi
      
      - name: Activate FastForge
        run: dart pub global activate fastforge

      - name: Build with FastForge
        shell: bash
        run: |
          echo "Building for ${{ matrix.build_target }}"
          case "${{ matrix.build_target }}" in
            "linux")
              # 使用 fastforge 构建 Linux 平台的多种格式
              fastforge release --name=dev
              ;;
            "windows")
              # 使用 fastforge 构建 Windows 平台
              fastforge release --name=all --jobs=windows-exe,windows-zip
              ;;
            "macos")
              # 使用 fastforge 构建 macOS 平台
              fastforge release --name=all --jobs=macos-dmg,macos-pkg
              ;;
          esac
          
          # 如果需要构建 Android
          if [ "${{ matrix.apk_build }}" == "true" ]; then
            fastforge release --name=all --jobs=android-apk,android-aab
          fi
        
      - name: List FastForge Output
        run: |
          echo "FastForge 构建输出:"
          ls -la dist/ || echo "没有找到 dist 目录"
          find . -name "*.deb" -o -name "*.rpm" -o -name "*.appimage" -o -name "*.exe" -o -name "*.zip" -o -name "*.dmg" -o -name "*.apk" -o -name "*.aab" | head -20
          
      - name: Organize Build Artifacts
        run: |
          mkdir -p release-artifacts
          
          # 复制 FastForge 构建的文件
          if [ -d "dist" ]; then
            cp -r dist/* release-artifacts/ 2>/dev/null || true
          fi
          
          # 查找并复制其他构建产物
          find . -name "*.deb" -exec cp {} release-artifacts/ \; 2>/dev/null || true
          find . -name "*.rpm" -exec cp {} release-artifacts/ \; 2>/dev/null || true
          find . -name "*.appimage" -exec cp {} release-artifacts/ \; 2>/dev/null || true
          find . -name "*.exe" -exec cp {} release-artifacts/ \; 2>/dev/null || true
          find . -name "*.dmg" -exec cp {} release-artifacts/ \; 2>/dev/null || true
          find . -name "*-release.apk" -exec cp {} release-artifacts/ \; 2>/dev/null || true
          find . -name "*-release.aab" -exec cp {} release-artifacts/ \; 2>/dev/null || true
          
          echo "整理后的构建产物:"
          ls -la release-artifacts/

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chatmcp-${{ matrix.build_target }}${{ matrix.apk_build && '-android' || '' }}
          path: |
            release-artifacts/
            dist/
        continue-on-error: true

      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release-artifacts/*
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}

  build-web:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: '3.32.1'

      - name: Create empty .env file
        run: touch .env
      
      - name: Install dependencies
        run: flutter pub get

      - name: Activate FastForge
        run: dart pub global activate fastforge

      - name: Build Web with FastForge
        run: |
          fastforge release --name=all --jobs=web-tar-gz

      - name: Upload Web Artifact
        uses: actions/upload-artifact@v4
        with:
          name: chatmcp-web
          path: |
            dist/
        continue-on-error: true

      - name: Create Web Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}